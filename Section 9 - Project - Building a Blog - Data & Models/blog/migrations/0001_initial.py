# Generated by Django 3.1.5 on 2021-01-19 15:00

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

# *NOTES*
# The `import` statements bring in necessary modules and functions for defining models and migrations.
# https://docs.djangoproject.com/en/5.0/ref/models/fields/#field-types

class Migration(migrations.Migration):

    initial = True
    # *NOTES*
    # This line indicates that this is the initial migration for the app.
    # Initial migrations create the database schema for the app.
    # https://docs.djangoproject.com/en/5.0/topics/migrations/#initial-migrations

    dependencies = [
    ]
    # *NOTES*
    # The `dependencies` attribute lists other migrations that this migration depends on.
    # Since this is the initial migration, there are no dependencies.
    # https://docs.djangoproject.com/en/5.0/topics/migrations/#dependencies

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email_address', models.EmailField(max_length=254)),
                # *NOTES*
                # This creates a new `Author` model with fields for `first_name`, `last_name`, and `email_address`.
                # `AutoField` automatically generates unique IDs for each instance.
                # `CharField` is used for short text fields, `EmailField` is a specialized field for email addresses.
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#autofield
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#charfield
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#emailfield
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=20)),
                # *NOTES*
                # This creates a new `Tag` model with a `caption` field.
                # `CharField` is used for short text fields.
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#charfield
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('excerpt', models.CharField(max_length=200)),
                ('image_name', models.CharField(max_length=100)),
                ('date', models.DateField(auto_now=True)),
                ('slug', models.SlugField(unique=True)),
                ('content', models.TextField(validators=[django.core.validators.MinLengthValidator(10)])),
                # *NOTES*
                # This creates a new `Post` model with fields for `title`, `excerpt`, `image_name`, `date`, `slug`, and `content`.
                # `DateField` with `auto_now=True` automatically sets the field to the current date.
                # `SlugField` is used for URL-friendly text.
                # `TextField` is used for large text fields, with a minimum length validator.
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#datefield
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#slugfield
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#textfield
                # https://docs.djangoproject.com/en/5.0/ref/validators/#minlengthvalidator
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='blog.author')),
                # *NOTES*
                # This creates a foreign key relationship between `Post` and `Author`.
                # If the related `Author` is deleted, the `author` field in `Post` will be set to `NULL`.
                # The `related_name` attribute specifies the name to use for the reverse relation from `Author` to `Post`.
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#foreignkey
                ('tags', models.ManyToManyField(to='blog.Tag')),
                # *NOTES*
                # This creates a many-to-many relationship between `Post` and `Tag`.
                # A `Post` can have multiple `Tags`, and a `Tag` can be associated with multiple `Posts`.
                # https://docs.djangoproject.com/en/5.0/ref/models/fields/#manytomanyfield
            ],
        ),
    ]
    # *NOTES*
    # The `operations` attribute lists the database operations to be performed.
    # In this case, it creates the `Author`, `Tag`, and `Post` models with the specified fields and relationships.
    # https://docs.djangoproject.com/en/5.0/topics/migrations/#operations
