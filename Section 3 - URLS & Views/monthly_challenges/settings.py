"""
Django settings for monthly_challenges project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
# *NOTES*
# This is a module-level docstring that provides information about the purpose of the file.
# It includes links to Django documentation for more details on settings.
# https://docs.djangoproject.com/en/5.0/topics/settings/
# https://docs.djangoproject.com/en/5.0/ref/settings/

from pathlib import Path
# *NOTES*
# This line imports the `Path` class from the `pathlib` module.
# `Path` is used for filesystem path manipulation.
# https://docs.python.org/3/library/pathlib.html#pathlib.Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# *NOTES*
# This sets `BASE_DIR` to the project's base directory.
# `Path(__file__).resolve().parent.parent` constructs an absolute path to the project directory.
# https://docs.djangoproject.com/en/5.0/ref/settings/#std:setting-BASE_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/
# *NOTES*
# This comment indicates that the following settings are for quick-start development and are not suitable for production.
# https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '81pt7z!lwxax*!p@cv_w0hmscvm5yiwod7rpl-t8vu#um79^$o'
# *NOTES*
# `SECRET_KEY` is used for cryptographic signing and should be kept secret in production.
# https://docs.djangoproject.com/en/5.0/ref/settings/#secret-key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# *NOTES*
# `DEBUG` mode should be set to `False` in production for security reasons.
# https://docs.djangoproject.com/en/5.0/ref/settings/#debug

ALLOWED_HOSTS = []
# *NOTES*
# `ALLOWED_HOSTS` defines a list of strings representing the host/domain names that this Django site can serve.
# https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts

# Application definition
# *NOTES*
# This section contains settings for installed applications.

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
# *NOTES*
# `INSTALLED_APPS` is a list of all Django applications that are enabled in this Django installation.
# Each string should be the full Python path to the application package.
# https://docs.djangoproject.com/en/5.0/ref/settings/#installed-apps

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# *NOTES*
# `MIDDLEWARE` is a list of middleware to use. Each middleware component is a Python class or function that processes requests and responses.
# https://docs.djangoproject.com/en/5.0/ref/middleware/

ROOT_URLCONF = 'monthly_challenges.urls'
# *NOTES*
# `ROOT_URLCONF` specifies the Python module to use for the URL configuration.
# https://docs.djangoproject.com/en/5.0/ref/settings/#root-urlconf

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# *NOTES*
# `TEMPLATES` is a list of template engines to use.
# `BACKEND` specifies the template engine to use.
# `DIRS` defines a list of directories where the engine should look for template source files, in search order.
# `APP_DIRS` tells whether the engine should look for templates inside installed applications.
# `OPTIONS` defines a dictionary of options to pass to the template engine.
# https://docs.djangoproject.com/en/5.0/ref/settings/#std:setting-TEMPLATES

WSGI_APPLICATION = 'monthly_challenges.wsgi.application'
# *NOTES*
# `WSGI_APPLICATION` specifies the Python module to use for the WSGI application.
# This is used by Djangoâ€™s development server and any WSGI-compliant web server.
# https://docs.djangoproject.com/en/5.0/ref/settings/#wsgi-application

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# *NOTES*
# This section contains settings for the database configuration.
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# *NOTES*
# `DATABASES` is a dictionary containing the settings for all databases to be used with this Django installation.
# `ENGINE` specifies the backend to use.
# `NAME` is the name of the database.
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
# *NOTES*
# This section contains settings for password validation.
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# *NOTES*
# `AUTH_PASSWORD_VALIDATORS` is a list of validators that are used to validate user passwords.
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/
# *NOTES*
# This section contains settings for internationalization.
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
# *NOTES*
# `LANGUAGE_CODE` specifies the language code for this installation.
# https://docs.djangoproject.com/en/5.0/ref/settings/#language-code

TIME_ZONE = 'UTC'
# *NOTES*
# `TIME_ZONE` specifies the time zone for this installation.
# https://docs.djangoproject.com/en/5.0/ref/settings/#time-zone

USE_I18N = True
# *NOTES*
# `USE_I18N` specifies whether Django's translation system should be enabled.
# https://docs.djangoproject.com/en/5.0/ref/settings/#use-i18n

USE_L10N = True
# *NOTES*
# `USE_L10N` specifies whether localized formatting of data will be enabled by default.
# https://docs.djangoproject.com/en/5.0/ref/settings/#use-l10n

USE_TZ = True
# *NOTES*
# `USE_TZ` specifies whether Django should use timezone-aware datetimes.
# https://docs.djangoproject.com/en/5.0/ref/settings/#use-tz

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# *NOTES*
# This section contains settings for static files.
# Static files are files like CSS, JavaScript, and images.
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
# *NOTES*
# `STATIC_URL` specifies the URL to use when referring to static files.
# https://docs.djangoproject.com/en/5.0/ref/settings/#static-url
